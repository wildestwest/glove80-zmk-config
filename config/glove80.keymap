/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 58 59 60 61 62>;
            tapping-term-ms = <225>;
            quick-tap-ms = <225>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            require-prior-idle-ms = <175>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <225>;
            quick-tap-ms = <225>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <10 11 12 13 14 15 22 23 24 25 26 27 35 36 37 38 39 47 48 49 50 51>;
            hold-trigger-on-release;
            require-prior-idle-ms = <175>;
        };

        layer_tap_cursor: layer_tap_cursor {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_CURSOR";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <41 42 74 73 29 30 50 49>;
        };

        layer_tap_symbol: layer_tap_symbol {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_SYMBOL";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 68 69 70 71>;
        };

        layer_tap_num: layer_tap_num {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_NUM";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 55 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79>;
        };

        layer_tap_workspaces: layer_tap_workspaces {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_WORKSPACES";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <39 27 26 38 37 25 24 36 35 23 22 34 28 40 29 41 30 42 43 31 32 44 45 33>;
        };

        vol_up_td: vol_up_td {
            compatible = "zmk,behavior-tap-dance";
            label = "VOL_UP_TD";
            #binding-cells = <0>;
            bindings = <&kp C_VOLUME_UP>, <&kp C_NEXT>, <&kp C_PLAY_PAUSE>;
        };

        vol_down_td: vol_down_td {
            compatible = "zmk,behavior-tap-dance";
            label = "VOL_DOWN_TD";
            #binding-cells = <0>;
            bindings = <&kp C_VOLUME_DOWN>, <&kp C_PREVIOUS>, <&kp C_MUTE>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&mt LS(LC(C)) LC(C)  &mt LS(LC(V)) LC(V)  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE                                                                                                                                                                                       &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp F8             &kp F9                 &kp F10
&kp EQUAL            &kp N1               &kp N2             &kp N3           &kp N4             &kp N5                                                                                                                                                              &kp N6    &kp N7                &kp N8                &kp N9             &kp N0                 &kp BSLH
&kp GRAVE            &kp B                &hml LEFT_ALT Y    &kp O            &kp U              &kp SQT                                                                                                                                                             &kp SEMI  &kp L                 &kp D                 &hmr RIGHT_ALT W   &kp V                  &kp Z
&caps_word           &hml LEFT_GUI C      &kp I              &hml LCTRL E     &hml LEFT_SHIFT A  &kp COMMA                                                                                                                                                           &kp DOT   &hmr RIGHT_SHIFT H    &hmr RCTRL T          &kp S              &hmr RIGHT_GUI N       &kp Q
&kp LEFT_SHIFT       &kp G                &kp X              &kp J            &kp K              &kp MINUS  &kp LEFT_SHIFT                 &mt LC(LS(C)) LC(C)      &mt LS(LC(V)) LC(V)          &vol_down_td                 &vol_up_td  &kp RIGHT_SHIFT            &kp FSLH  &kp R                 &kp M                 &kp F              &kp P                  &kp RIGHT_SHIFT
&magic 1 0           &kp HOME             &kp PG_UP          &kp PG_DN        &kp END                       &layer_tap_cursor 3 BACKSPACE  &layer_tap_num 5 DELETE  &layer_tap_workspaces 6 ESC  &layer_tap_workspaces 6 TAB  &kp RET     &layer_tap_symbol 2 SPACE            &kp LS(LPAR)          &kp LEFT_BRACKET      &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &magic 1 0
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&to 0        &to 1            &to 2            &to 3            &to 4            &to 5                                                             &to 6  &to 7  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        symbol {
            bindings = <
&none            &none           &none                 &none                  &none                                                                                                &none  &none  &none  &none  &none
&none            &none           &none                 &none                  &none             &none                                                                       &none  &none  &none  &none  &none  &none
&kp EXCLAMATION  &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE   &kp PIPE                                                                    &none  &none  &none  &none  &none  &none
&kp HASH         &kp CARET       &kp EQUAL             &kp PLUS               &kp DOLLAR        &kp ASTERISK                                                                &none  &none  &none  &none  &none  &none
&kp TILDE        &kp LESS_THAN   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp GREATER_THAN  &kp GRAVE     &none          &none        &none        &none  &none  &none  &none  &none  &none  &none  &none  &none
&none            &none           &none                 &kp BACKSLASH          &kp AMPERSAND                   &kp BACKSPACE  &kp PERCENT  &kp AT_SIGN  &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };

        cursor {
            bindings = <
&trans  &trans  &trans  &trans          &trans                                                                                       &trans          &trans    &trans  &trans  &trans
&trans  &trans  &trans  &trans          &trans        &trans                                                                 &trans  &trans          &trans    &trans  &trans  &trans
&trans  &trans  &trans  &trans          &trans        &trans                                                                 &trans  &kp RIGHT       &kp END   &trans  &trans  &trans
&trans  &trans  &trans  &kp PAGE_DOWN   &kp PAGE_UP   &trans                                                                 &none   &kp LEFT_ARROW  &kp HOME  &none   &none   &none
&trans  &trans  &trans  &kp DOWN_ARROW  &kp UP_ARROW  &trans  &trans  &trans  &trans  &trans  &trans         &trans          &trans  &trans          &trans    &trans  &trans  &trans
&trans  &trans  &trans  &trans          &trans                &trans  &trans  &none   &none   &kp BACKSPACE  &kp LEFT_SHIFT          &trans          &trans    &trans  &trans  &trans
            >;
        };

        gaming {
            bindings = <
&trans     &trans     &trans  &trans  &trans                                                                        &trans  &trans  &trans  &trans  &trans
&kp EQUAL  &kp N1     &kp N2  &kp N3  &kp N4  &kp N5                                                        &trans  &trans  &trans  &trans  &trans  &trans
&kp N1     &kp N2     &kp N3  &kp N4  &kp N5  &kp N6                                                        &trans  &trans  &trans  &trans  &trans  &trans
&kp T      &kp J      &kp Q   &kp W   &kp E   &kp R                                                         &trans  &trans  &trans  &trans  &trans  &trans
&kp G      &kp LSHFT  &kp A   &kp S   &kp D   &kp F   &kp TAB    &kp RET   &kp I    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp V      &kp LCTRL  &kp Z   &kp X   &kp C           &kp SPACE  &kp LALT  &kp ESC  &tog 4  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        Numbers {
            bindings = <
&none  &none  &none  &none  &none                                                                           &none   &none   &none   &none       &none
&none  &none  &none  &none  &none  &none                                                      &none         &none   &none   &none   &none       &none
&none  &none  &none  &none  &none  &none                                                      &kp ASTERISK  &kp N7  &kp N8  &kp N9  &kp PERIOD  &none
&none  &none  &none  &none  &none  &none                                                      &kp PLUS      &kp N4  &kp N5  &kp N6  &kp N0      &none
&none  &none  &none  &none  &none  &none  &none  &none  &none  &none    &none      &none      &kp MINUS     &kp N1  &kp N2  &kp N3  &kp FSLH    &none
&none  &none  &none  &none  &none         &none  &none  &none  &kp TAB  &kp ENTER  &kp SPACE                &none   &none   &none   &none       &none
            >;
        };

        workspaces {
            bindings = <
&trans  &trans                &trans                &trans                &trans                                                                                                        &trans            &trans          &trans          &trans          &trans
&trans  &trans                &trans                &trans                &trans                &trans                                                            &trans                &trans            &trans          &trans          &trans          &trans
&trans  &kp LS(LG(NUMBER_1))  &kp LS(LG(NUMBER_2))  &kp LS(LG(NUMBER_3))  &kp LS(LG(NUMBER_4))  &kp LS(LG(N5))                                                    &kp RS(RG(NUMBER_6))  &kp RS(RG(N7))    &kp RS(RG(N8))  &kp RS(RG(N9))  &kp RS(RG(N0))  &trans
&trans  &kp LG(NUMBER_1)      &kp LG(NUMBER_2)      &kp LG(NUMBER_3)      &kp LG(NUMBER_4)      &kp LG(NUMBER_5)                                                  &kp RG(NUMBER_6)      &kp RG(NUMBER_7)  &kp RG(N8)      &kp RG(N9)      &kp RG(N0)      &trans
&trans  &trans                &trans                &trans                &trans                &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans                &trans            &trans          &trans          &trans          &trans
&trans  &trans                &trans                &trans                &trans                                  &trans  &trans  &trans  &trans  &trans  &trans                        &trans            &trans          &trans          &trans          &trans
            >;
        };

        typing {
            bindings = <
&mt LS(LC(C)) LC(C)  &mt LS(LC(V)) LC(V)  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE                                                                                                                                                                                &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp F8             &kp F9                 &kp F10
&kp EQUAL            &kp N1               &kp N2             &kp N3           &kp N4      &kp N5                                                                                                                                                              &kp N6    &kp N7                &kp N8                &kp N9             &kp N0                 &kp BSLH
&kp GRAVE            &kp B                &kp Y              &kp O            &kp U       &kp SQT                                                                                                                                                             &kp SEMI  &kp L                 &kp D                 &kp W              &kp V                  &kp Z
&caps_word           &kp C                &kp I              &kp E            &kp A       &kp COMMA                                                                                                                                                           &kp DOT   &kp H                 &kp T                 &kp S              &kp N                  &kp Q
&kp LEFT_SHIFT       &kp G                &kp X              &kp J            &kp K       &kp MINUS  &kp LEFT_SHIFT                 &mt LC(LS(C)) LC(C)      &mt LC(LS(V)) LC(V)          &vol_down_td                 &vol_up_td  &kp RIGHT_SHIFT            &kp FSLH  &kp R                 &kp M                 &kp F              &kp P                  &kp RIGHT_SHIFT
&magic 1 0           &kp HOME             &kp PG_UP          &kp PG_DN        &kp END                &layer_tap_cursor 3 BACKSPACE  &layer_tap_num 5 DELETE  &layer_tap_workspaces 6 ESC  &layer_tap_workspaces 6 TAB  &kp RET     &layer_tap_symbol 2 SPACE            &kp LS(LPAR)          &kp LEFT_BRACKET      &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &magic 1 0
            >;
        };
    };
};
